// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBU_TABLES_H_
#define FLATBUFFERS_GENERATED_FBU_TABLES_H_

#include "flatbuffers/flatbuffers.h"

namespace Tables {

struct Root_FBU;

struct Rows_FBU;

struct Record_FBU;

struct Cols_FBU;

struct Col_FBU;

struct SDT_UINT32_FBU;

struct SDT_UINT64_FBU;

struct SDT_FLOAT_FBU;

struct SDT_STRING_FBU;

struct ColInt_FBU;

struct ColFloat_FBU;

struct ColString_FBU;

enum Relation_FBU {
  Relation_FBU_NONE = 0,
  Relation_FBU_Rows_FBU = 1,
  Relation_FBU_Cols_FBU = 2,
  Relation_FBU_ColInt_FBU = 3,
  Relation_FBU_ColFloat_FBU = 4,
  Relation_FBU_ColString_FBU = 5,
  Relation_FBU_MIN = Relation_FBU_NONE,
  Relation_FBU_MAX = Relation_FBU_ColString_FBU
};

inline const Relation_FBU (&EnumValuesRelation_FBU())[6] {
  static const Relation_FBU values[] = {
    Relation_FBU_NONE,
    Relation_FBU_Rows_FBU,
    Relation_FBU_Cols_FBU,
    Relation_FBU_ColInt_FBU,
    Relation_FBU_ColFloat_FBU,
    Relation_FBU_ColString_FBU
  };
  return values;
}

inline const char * const *EnumNamesRelation_FBU() {
  static const char * const names[] = {
    "NONE",
    "Rows_FBU",
    "Cols_FBU",
    "ColInt_FBU",
    "ColFloat_FBU",
    "ColString_FBU",
    nullptr
  };
  return names;
}

inline const char *EnumNameRelation_FBU(Relation_FBU e) {
  if (e < Relation_FBU_NONE || e > Relation_FBU_ColString_FBU) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesRelation_FBU()[index];
}

template<typename T> struct Relation_FBUTraits {
  static const Relation_FBU enum_value = Relation_FBU_NONE;
};

template<> struct Relation_FBUTraits<Rows_FBU> {
  static const Relation_FBU enum_value = Relation_FBU_Rows_FBU;
};

template<> struct Relation_FBUTraits<Cols_FBU> {
  static const Relation_FBU enum_value = Relation_FBU_Cols_FBU;
};

template<> struct Relation_FBUTraits<ColInt_FBU> {
  static const Relation_FBU enum_value = Relation_FBU_ColInt_FBU;
};

template<> struct Relation_FBUTraits<ColFloat_FBU> {
  static const Relation_FBU enum_value = Relation_FBU_ColFloat_FBU;
};

template<> struct Relation_FBUTraits<ColString_FBU> {
  static const Relation_FBU enum_value = Relation_FBU_ColString_FBU;
};

bool VerifyRelation_FBU(flatbuffers::Verifier &verifier, const void *obj, Relation_FBU type);
bool VerifyRelation_FBUVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum DataTypes_FBU {
  DataTypes_FBU_NONE = 0,
  DataTypes_FBU_SDT_UINT32_FBU = 1,
  DataTypes_FBU_SDT_UINT64_FBU = 2,
  DataTypes_FBU_SDT_FLOAT_FBU = 3,
  DataTypes_FBU_SDT_STRING_FBU = 4,
  DataTypes_FBU_MIN = DataTypes_FBU_NONE,
  DataTypes_FBU_MAX = DataTypes_FBU_SDT_STRING_FBU
};

inline const DataTypes_FBU (&EnumValuesDataTypes_FBU())[5] {
  static const DataTypes_FBU values[] = {
    DataTypes_FBU_NONE,
    DataTypes_FBU_SDT_UINT32_FBU,
    DataTypes_FBU_SDT_UINT64_FBU,
    DataTypes_FBU_SDT_FLOAT_FBU,
    DataTypes_FBU_SDT_STRING_FBU
  };
  return values;
}

inline const char * const *EnumNamesDataTypes_FBU() {
  static const char * const names[] = {
    "NONE",
    "SDT_UINT32_FBU",
    "SDT_UINT64_FBU",
    "SDT_FLOAT_FBU",
    "SDT_STRING_FBU",
    nullptr
  };
  return names;
}

inline const char *EnumNameDataTypes_FBU(DataTypes_FBU e) {
  if (e < DataTypes_FBU_NONE || e > DataTypes_FBU_SDT_STRING_FBU) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesDataTypes_FBU()[index];
}

template<typename T> struct DataTypes_FBUTraits {
  static const DataTypes_FBU enum_value = DataTypes_FBU_NONE;
};

template<> struct DataTypes_FBUTraits<SDT_UINT32_FBU> {
  static const DataTypes_FBU enum_value = DataTypes_FBU_SDT_UINT32_FBU;
};

template<> struct DataTypes_FBUTraits<SDT_UINT64_FBU> {
  static const DataTypes_FBU enum_value = DataTypes_FBU_SDT_UINT64_FBU;
};

template<> struct DataTypes_FBUTraits<SDT_FLOAT_FBU> {
  static const DataTypes_FBU enum_value = DataTypes_FBU_SDT_FLOAT_FBU;
};

template<> struct DataTypes_FBUTraits<SDT_STRING_FBU> {
  static const DataTypes_FBU enum_value = DataTypes_FBU_SDT_STRING_FBU;
};

bool VerifyDataTypes_FBU(flatbuffers::Verifier &verifier, const void *obj, DataTypes_FBU type);
bool VerifyDataTypes_FBUVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Root_FBU FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA_FORMAT_TYPE = 4,
    VT_SKYHOOK_VERSION = 6,
    VT_DATA_STRUCTURE_VERSION = 8,
    VT_DATA_SCHEMA_VERSION = 10,
    VT_DATA_SCHEMA = 12,
    VT_DB_SCHEMA_NAME = 14,
    VT_NROWS = 16,
    VT_NCOLS = 18,
    VT_TABLE_NAME = 20,
    VT_DELETE_VECTOR = 22,
    VT_RELATIONDATA_TYPE = 24,
    VT_RELATIONDATA = 26
  };
  int32_t data_format_type() const {
    return GetField<int32_t>(VT_DATA_FORMAT_TYPE, 0);
  }
  int32_t skyhook_version() const {
    return GetField<int32_t>(VT_SKYHOOK_VERSION, 0);
  }
  int32_t data_structure_version() const {
    return GetField<int32_t>(VT_DATA_STRUCTURE_VERSION, 0);
  }
  int32_t data_schema_version() const {
    return GetField<int32_t>(VT_DATA_SCHEMA_VERSION, 0);
  }
  const flatbuffers::String *data_schema() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA_SCHEMA);
  }
  const flatbuffers::String *db_schema_name() const {
    return GetPointer<const flatbuffers::String *>(VT_DB_SCHEMA_NAME);
  }
  uint32_t nrows() const {
    return GetField<uint32_t>(VT_NROWS, 0);
  }
  uint32_t ncols() const {
    return GetField<uint32_t>(VT_NCOLS, 0);
  }
  const flatbuffers::String *table_name() const {
    return GetPointer<const flatbuffers::String *>(VT_TABLE_NAME);
  }
  const flatbuffers::Vector<uint8_t> *delete_vector() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DELETE_VECTOR);
  }
  Relation_FBU relationData_type() const {
    return static_cast<Relation_FBU>(GetField<uint8_t>(VT_RELATIONDATA_TYPE, 0));
  }
  const void *relationData() const {
    return GetPointer<const void *>(VT_RELATIONDATA);
  }
  template<typename T> const T *relationData_as() const;
  const Rows_FBU *relationData_as_Rows_FBU() const {
    return relationData_type() == Relation_FBU_Rows_FBU ? static_cast<const Rows_FBU *>(relationData()) : nullptr;
  }
  const Cols_FBU *relationData_as_Cols_FBU() const {
    return relationData_type() == Relation_FBU_Cols_FBU ? static_cast<const Cols_FBU *>(relationData()) : nullptr;
  }
  const ColInt_FBU *relationData_as_ColInt_FBU() const {
    return relationData_type() == Relation_FBU_ColInt_FBU ? static_cast<const ColInt_FBU *>(relationData()) : nullptr;
  }
  const ColFloat_FBU *relationData_as_ColFloat_FBU() const {
    return relationData_type() == Relation_FBU_ColFloat_FBU ? static_cast<const ColFloat_FBU *>(relationData()) : nullptr;
  }
  const ColString_FBU *relationData_as_ColString_FBU() const {
    return relationData_type() == Relation_FBU_ColString_FBU ? static_cast<const ColString_FBU *>(relationData()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DATA_FORMAT_TYPE) &&
           VerifyField<int32_t>(verifier, VT_SKYHOOK_VERSION) &&
           VerifyField<int32_t>(verifier, VT_DATA_STRUCTURE_VERSION) &&
           VerifyField<int32_t>(verifier, VT_DATA_SCHEMA_VERSION) &&
           VerifyOffset(verifier, VT_DATA_SCHEMA) &&
           verifier.VerifyString(data_schema()) &&
           VerifyOffset(verifier, VT_DB_SCHEMA_NAME) &&
           verifier.VerifyString(db_schema_name()) &&
           VerifyField<uint32_t>(verifier, VT_NROWS) &&
           VerifyField<uint32_t>(verifier, VT_NCOLS) &&
           VerifyOffset(verifier, VT_TABLE_NAME) &&
           verifier.VerifyString(table_name()) &&
           VerifyOffset(verifier, VT_DELETE_VECTOR) &&
           verifier.VerifyVector(delete_vector()) &&
           VerifyField<uint8_t>(verifier, VT_RELATIONDATA_TYPE) &&
           VerifyOffset(verifier, VT_RELATIONDATA) &&
           VerifyRelation_FBU(verifier, relationData(), relationData_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Rows_FBU *Root_FBU::relationData_as<Rows_FBU>() const {
  return relationData_as_Rows_FBU();
}

template<> inline const Cols_FBU *Root_FBU::relationData_as<Cols_FBU>() const {
  return relationData_as_Cols_FBU();
}

template<> inline const ColInt_FBU *Root_FBU::relationData_as<ColInt_FBU>() const {
  return relationData_as_ColInt_FBU();
}

template<> inline const ColFloat_FBU *Root_FBU::relationData_as<ColFloat_FBU>() const {
  return relationData_as_ColFloat_FBU();
}

template<> inline const ColString_FBU *Root_FBU::relationData_as<ColString_FBU>() const {
  return relationData_as_ColString_FBU();
}

struct Root_FBUBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data_format_type(int32_t data_format_type) {
    fbb_.AddElement<int32_t>(Root_FBU::VT_DATA_FORMAT_TYPE, data_format_type, 0);
  }
  void add_skyhook_version(int32_t skyhook_version) {
    fbb_.AddElement<int32_t>(Root_FBU::VT_SKYHOOK_VERSION, skyhook_version, 0);
  }
  void add_data_structure_version(int32_t data_structure_version) {
    fbb_.AddElement<int32_t>(Root_FBU::VT_DATA_STRUCTURE_VERSION, data_structure_version, 0);
  }
  void add_data_schema_version(int32_t data_schema_version) {
    fbb_.AddElement<int32_t>(Root_FBU::VT_DATA_SCHEMA_VERSION, data_schema_version, 0);
  }
  void add_data_schema(flatbuffers::Offset<flatbuffers::String> data_schema) {
    fbb_.AddOffset(Root_FBU::VT_DATA_SCHEMA, data_schema);
  }
  void add_db_schema_name(flatbuffers::Offset<flatbuffers::String> db_schema_name) {
    fbb_.AddOffset(Root_FBU::VT_DB_SCHEMA_NAME, db_schema_name);
  }
  void add_nrows(uint32_t nrows) {
    fbb_.AddElement<uint32_t>(Root_FBU::VT_NROWS, nrows, 0);
  }
  void add_ncols(uint32_t ncols) {
    fbb_.AddElement<uint32_t>(Root_FBU::VT_NCOLS, ncols, 0);
  }
  void add_table_name(flatbuffers::Offset<flatbuffers::String> table_name) {
    fbb_.AddOffset(Root_FBU::VT_TABLE_NAME, table_name);
  }
  void add_delete_vector(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> delete_vector) {
    fbb_.AddOffset(Root_FBU::VT_DELETE_VECTOR, delete_vector);
  }
  void add_relationData_type(Relation_FBU relationData_type) {
    fbb_.AddElement<uint8_t>(Root_FBU::VT_RELATIONDATA_TYPE, static_cast<uint8_t>(relationData_type), 0);
  }
  void add_relationData(flatbuffers::Offset<void> relationData) {
    fbb_.AddOffset(Root_FBU::VT_RELATIONDATA, relationData);
  }
  explicit Root_FBUBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Root_FBUBuilder &operator=(const Root_FBUBuilder &);
  flatbuffers::Offset<Root_FBU> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Root_FBU>(end);
    return o;
  }
};

inline flatbuffers::Offset<Root_FBU> CreateRoot_FBU(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t data_format_type = 0,
    int32_t skyhook_version = 0,
    int32_t data_structure_version = 0,
    int32_t data_schema_version = 0,
    flatbuffers::Offset<flatbuffers::String> data_schema = 0,
    flatbuffers::Offset<flatbuffers::String> db_schema_name = 0,
    uint32_t nrows = 0,
    uint32_t ncols = 0,
    flatbuffers::Offset<flatbuffers::String> table_name = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> delete_vector = 0,
    Relation_FBU relationData_type = Relation_FBU_NONE,
    flatbuffers::Offset<void> relationData = 0) {
  Root_FBUBuilder builder_(_fbb);
  builder_.add_relationData(relationData);
  builder_.add_delete_vector(delete_vector);
  builder_.add_table_name(table_name);
  builder_.add_ncols(ncols);
  builder_.add_nrows(nrows);
  builder_.add_db_schema_name(db_schema_name);
  builder_.add_data_schema(data_schema);
  builder_.add_data_schema_version(data_schema_version);
  builder_.add_data_structure_version(data_structure_version);
  builder_.add_skyhook_version(skyhook_version);
  builder_.add_data_format_type(data_format_type);
  builder_.add_relationData_type(relationData_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Root_FBU> CreateRoot_FBUDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t data_format_type = 0,
    int32_t skyhook_version = 0,
    int32_t data_structure_version = 0,
    int32_t data_schema_version = 0,
    const char *data_schema = nullptr,
    const char *db_schema_name = nullptr,
    uint32_t nrows = 0,
    uint32_t ncols = 0,
    const char *table_name = nullptr,
    const std::vector<uint8_t> *delete_vector = nullptr,
    Relation_FBU relationData_type = Relation_FBU_NONE,
    flatbuffers::Offset<void> relationData = 0) {
  auto data_schema__ = data_schema ? _fbb.CreateString(data_schema) : 0;
  auto db_schema_name__ = db_schema_name ? _fbb.CreateString(db_schema_name) : 0;
  auto table_name__ = table_name ? _fbb.CreateString(table_name) : 0;
  auto delete_vector__ = delete_vector ? _fbb.CreateVector<uint8_t>(*delete_vector) : 0;
  return Tables::CreateRoot_FBU(
      _fbb,
      data_format_type,
      skyhook_version,
      data_structure_version,
      data_schema_version,
      data_schema__,
      db_schema_name__,
      nrows,
      ncols,
      table_name__,
      delete_vector__,
      relationData_type,
      relationData);
}

struct Rows_FBU FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Record_FBU>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Record_FBU>> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfTables(data()) &&
           verifier.EndTable();
  }
};

struct Rows_FBUBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Record_FBU>>> data) {
    fbb_.AddOffset(Rows_FBU::VT_DATA, data);
  }
  explicit Rows_FBUBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Rows_FBUBuilder &operator=(const Rows_FBUBuilder &);
  flatbuffers::Offset<Rows_FBU> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Rows_FBU>(end);
    return o;
  }
};

inline flatbuffers::Offset<Rows_FBU> CreateRows_FBU(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Record_FBU>>> data = 0) {
  Rows_FBUBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<Rows_FBU> CreateRows_FBUDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Record_FBU>> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<flatbuffers::Offset<Record_FBU>>(*data) : 0;
  return Tables::CreateRows_FBU(
      _fbb,
      data__);
}

struct Record_FBU FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RID = 4,
    VT_NULLBITS = 6,
    VT_DATA_TYPE = 8,
    VT_DATA = 10
  };
  uint64_t RID() const {
    return GetField<uint64_t>(VT_RID, 0);
  }
  const flatbuffers::Vector<uint64_t> *nullbits() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_NULLBITS);
  }
  const flatbuffers::Vector<uint8_t> *data_type() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA_TYPE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<void>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<void>> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_RID) &&
           VerifyOffset(verifier, VT_NULLBITS) &&
           verifier.VerifyVector(nullbits()) &&
           VerifyOffset(verifier, VT_DATA_TYPE) &&
           verifier.VerifyVector(data_type()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyDataTypes_FBUVector(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

struct Record_FBUBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_RID(uint64_t RID) {
    fbb_.AddElement<uint64_t>(Record_FBU::VT_RID, RID, 0);
  }
  void add_nullbits(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> nullbits) {
    fbb_.AddOffset(Record_FBU::VT_NULLBITS, nullbits);
  }
  void add_data_type(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data_type) {
    fbb_.AddOffset(Record_FBU::VT_DATA_TYPE, data_type);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> data) {
    fbb_.AddOffset(Record_FBU::VT_DATA, data);
  }
  explicit Record_FBUBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Record_FBUBuilder &operator=(const Record_FBUBuilder &);
  flatbuffers::Offset<Record_FBU> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Record_FBU>(end);
    return o;
  }
};

inline flatbuffers::Offset<Record_FBU> CreateRecord_FBU(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t RID = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> nullbits = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data_type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> data = 0) {
  Record_FBUBuilder builder_(_fbb);
  builder_.add_RID(RID);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  builder_.add_nullbits(nullbits);
  return builder_.Finish();
}

inline flatbuffers::Offset<Record_FBU> CreateRecord_FBUDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t RID = 0,
    const std::vector<uint64_t> *nullbits = nullptr,
    const std::vector<uint8_t> *data_type = nullptr,
    const std::vector<flatbuffers::Offset<void>> *data = nullptr) {
  auto nullbits__ = nullbits ? _fbb.CreateVector<uint64_t>(*nullbits) : 0;
  auto data_type__ = data_type ? _fbb.CreateVector<uint8_t>(*data_type) : 0;
  auto data__ = data ? _fbb.CreateVector<flatbuffers::Offset<void>>(*data) : 0;
  return Tables::CreateRecord_FBU(
      _fbb,
      RID,
      nullbits__,
      data_type__,
      data__);
}

struct Cols_FBU FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RIDS = 4,
    VT_DATA = 6
  };
  const flatbuffers::Vector<uint64_t> *RIDs() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_RIDS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Col_FBU>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Col_FBU>> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RIDS) &&
           verifier.VerifyVector(RIDs()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfTables(data()) &&
           verifier.EndTable();
  }
};

struct Cols_FBUBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_RIDs(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> RIDs) {
    fbb_.AddOffset(Cols_FBU::VT_RIDS, RIDs);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Col_FBU>>> data) {
    fbb_.AddOffset(Cols_FBU::VT_DATA, data);
  }
  explicit Cols_FBUBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Cols_FBUBuilder &operator=(const Cols_FBUBuilder &);
  flatbuffers::Offset<Cols_FBU> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Cols_FBU>(end);
    return o;
  }
};

inline flatbuffers::Offset<Cols_FBU> CreateCols_FBU(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> RIDs = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Col_FBU>>> data = 0) {
  Cols_FBUBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_RIDs(RIDs);
  return builder_.Finish();
}

inline flatbuffers::Offset<Cols_FBU> CreateCols_FBUDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *RIDs = nullptr,
    const std::vector<flatbuffers::Offset<Col_FBU>> *data = nullptr) {
  auto RIDs__ = RIDs ? _fbb.CreateVector<uint64_t>(*RIDs) : 0;
  auto data__ = data ? _fbb.CreateVector<flatbuffers::Offset<Col_FBU>>(*data) : 0;
  return Tables::CreateCols_FBU(
      _fbb,
      RIDs__,
      data__);
}

struct Col_FBU FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NULLBITS = 4,
    VT_COL_NAME = 6,
    VT_COL_INDEX = 8,
    VT_DATA_TYPE = 10,
    VT_DATA = 12
  };
  const flatbuffers::Vector<uint64_t> *nullbits() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_NULLBITS);
  }
  const flatbuffers::String *col_name() const {
    return GetPointer<const flatbuffers::String *>(VT_COL_NAME);
  }
  uint8_t col_index() const {
    return GetField<uint8_t>(VT_COL_INDEX, 0);
  }
  DataTypes_FBU data_type() const {
    return static_cast<DataTypes_FBU>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const SDT_UINT32_FBU *data_as_SDT_UINT32_FBU() const {
    return data_type() == DataTypes_FBU_SDT_UINT32_FBU ? static_cast<const SDT_UINT32_FBU *>(data()) : nullptr;
  }
  const SDT_UINT64_FBU *data_as_SDT_UINT64_FBU() const {
    return data_type() == DataTypes_FBU_SDT_UINT64_FBU ? static_cast<const SDT_UINT64_FBU *>(data()) : nullptr;
  }
  const SDT_FLOAT_FBU *data_as_SDT_FLOAT_FBU() const {
    return data_type() == DataTypes_FBU_SDT_FLOAT_FBU ? static_cast<const SDT_FLOAT_FBU *>(data()) : nullptr;
  }
  const SDT_STRING_FBU *data_as_SDT_STRING_FBU() const {
    return data_type() == DataTypes_FBU_SDT_STRING_FBU ? static_cast<const SDT_STRING_FBU *>(data()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NULLBITS) &&
           verifier.VerifyVector(nullbits()) &&
           VerifyOffset(verifier, VT_COL_NAME) &&
           verifier.VerifyString(col_name()) &&
           VerifyField<uint8_t>(verifier, VT_COL_INDEX) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE) &&
           VerifyOffset(verifier, VT_DATA) &&
           VerifyDataTypes_FBU(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const SDT_UINT32_FBU *Col_FBU::data_as<SDT_UINT32_FBU>() const {
  return data_as_SDT_UINT32_FBU();
}

template<> inline const SDT_UINT64_FBU *Col_FBU::data_as<SDT_UINT64_FBU>() const {
  return data_as_SDT_UINT64_FBU();
}

template<> inline const SDT_FLOAT_FBU *Col_FBU::data_as<SDT_FLOAT_FBU>() const {
  return data_as_SDT_FLOAT_FBU();
}

template<> inline const SDT_STRING_FBU *Col_FBU::data_as<SDT_STRING_FBU>() const {
  return data_as_SDT_STRING_FBU();
}

struct Col_FBUBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nullbits(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> nullbits) {
    fbb_.AddOffset(Col_FBU::VT_NULLBITS, nullbits);
  }
  void add_col_name(flatbuffers::Offset<flatbuffers::String> col_name) {
    fbb_.AddOffset(Col_FBU::VT_COL_NAME, col_name);
  }
  void add_col_index(uint8_t col_index) {
    fbb_.AddElement<uint8_t>(Col_FBU::VT_COL_INDEX, col_index, 0);
  }
  void add_data_type(DataTypes_FBU data_type) {
    fbb_.AddElement<uint8_t>(Col_FBU::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(flatbuffers::Offset<void> data) {
    fbb_.AddOffset(Col_FBU::VT_DATA, data);
  }
  explicit Col_FBUBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Col_FBUBuilder &operator=(const Col_FBUBuilder &);
  flatbuffers::Offset<Col_FBU> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Col_FBU>(end);
    return o;
  }
};

inline flatbuffers::Offset<Col_FBU> CreateCol_FBU(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> nullbits = 0,
    flatbuffers::Offset<flatbuffers::String> col_name = 0,
    uint8_t col_index = 0,
    DataTypes_FBU data_type = DataTypes_FBU_NONE,
    flatbuffers::Offset<void> data = 0) {
  Col_FBUBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_col_name(col_name);
  builder_.add_nullbits(nullbits);
  builder_.add_data_type(data_type);
  builder_.add_col_index(col_index);
  return builder_.Finish();
}

inline flatbuffers::Offset<Col_FBU> CreateCol_FBUDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *nullbits = nullptr,
    const char *col_name = nullptr,
    uint8_t col_index = 0,
    DataTypes_FBU data_type = DataTypes_FBU_NONE,
    flatbuffers::Offset<void> data = 0) {
  auto nullbits__ = nullbits ? _fbb.CreateVector<uint64_t>(*nullbits) : 0;
  auto col_name__ = col_name ? _fbb.CreateString(col_name) : 0;
  return Tables::CreateCol_FBU(
      _fbb,
      nullbits__,
      col_name__,
      col_index,
      data_type,
      data);
}

struct SDT_UINT32_FBU FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint32_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct SDT_UINT32_FBUBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> data) {
    fbb_.AddOffset(SDT_UINT32_FBU::VT_DATA, data);
  }
  explicit SDT_UINT32_FBUBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SDT_UINT32_FBUBuilder &operator=(const SDT_UINT32_FBUBuilder &);
  flatbuffers::Offset<SDT_UINT32_FBU> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SDT_UINT32_FBU>(end);
    return o;
  }
};

inline flatbuffers::Offset<SDT_UINT32_FBU> CreateSDT_UINT32_FBU(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> data = 0) {
  SDT_UINT32_FBUBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<SDT_UINT32_FBU> CreateSDT_UINT32_FBUDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint32_t>(*data) : 0;
  return Tables::CreateSDT_UINT32_FBU(
      _fbb,
      data__);
}

struct SDT_UINT64_FBU FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint64_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct SDT_UINT64_FBUBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> data) {
    fbb_.AddOffset(SDT_UINT64_FBU::VT_DATA, data);
  }
  explicit SDT_UINT64_FBUBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SDT_UINT64_FBUBuilder &operator=(const SDT_UINT64_FBUBuilder &);
  flatbuffers::Offset<SDT_UINT64_FBU> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SDT_UINT64_FBU>(end);
    return o;
  }
};

inline flatbuffers::Offset<SDT_UINT64_FBU> CreateSDT_UINT64_FBU(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> data = 0) {
  SDT_UINT64_FBUBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<SDT_UINT64_FBU> CreateSDT_UINT64_FBUDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint64_t>(*data) : 0;
  return Tables::CreateSDT_UINT64_FBU(
      _fbb,
      data__);
}

struct SDT_FLOAT_FBU FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<float> *data() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct SDT_FLOAT_FBUBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<float>> data) {
    fbb_.AddOffset(SDT_FLOAT_FBU::VT_DATA, data);
  }
  explicit SDT_FLOAT_FBUBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SDT_FLOAT_FBUBuilder &operator=(const SDT_FLOAT_FBUBuilder &);
  flatbuffers::Offset<SDT_FLOAT_FBU> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SDT_FLOAT_FBU>(end);
    return o;
  }
};

inline flatbuffers::Offset<SDT_FLOAT_FBU> CreateSDT_FLOAT_FBU(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> data = 0) {
  SDT_FLOAT_FBUBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<SDT_FLOAT_FBU> CreateSDT_FLOAT_FBUDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<float>(*data) : 0;
  return Tables::CreateSDT_FLOAT_FBU(
      _fbb,
      data__);
}

struct SDT_STRING_FBU FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfStrings(data()) &&
           verifier.EndTable();
  }
};

struct SDT_STRING_FBUBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> data) {
    fbb_.AddOffset(SDT_STRING_FBU::VT_DATA, data);
  }
  explicit SDT_STRING_FBUBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SDT_STRING_FBUBuilder &operator=(const SDT_STRING_FBUBuilder &);
  flatbuffers::Offset<SDT_STRING_FBU> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SDT_STRING_FBU>(end);
    return o;
  }
};

inline flatbuffers::Offset<SDT_STRING_FBU> CreateSDT_STRING_FBU(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> data = 0) {
  SDT_STRING_FBUBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<SDT_STRING_FBU> CreateSDT_STRING_FBUDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*data) : 0;
  return Tables::CreateSDT_STRING_FBU(
      _fbb,
      data__);
}

struct ColInt_FBU FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NULLBITS = 4,
    VT_COL_NAME = 6,
    VT_COL_INDEX = 8,
    VT_RIDS = 10,
    VT_DATA = 12
  };
  const flatbuffers::Vector<uint64_t> *nullbits() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_NULLBITS);
  }
  const flatbuffers::String *col_name() const {
    return GetPointer<const flatbuffers::String *>(VT_COL_NAME);
  }
  uint8_t col_index() const {
    return GetField<uint8_t>(VT_COL_INDEX, 0);
  }
  const flatbuffers::Vector<uint64_t> *RIDs() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_RIDS);
  }
  const flatbuffers::Vector<uint64_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NULLBITS) &&
           verifier.VerifyVector(nullbits()) &&
           VerifyOffset(verifier, VT_COL_NAME) &&
           verifier.VerifyString(col_name()) &&
           VerifyField<uint8_t>(verifier, VT_COL_INDEX) &&
           VerifyOffset(verifier, VT_RIDS) &&
           verifier.VerifyVector(RIDs()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct ColInt_FBUBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nullbits(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> nullbits) {
    fbb_.AddOffset(ColInt_FBU::VT_NULLBITS, nullbits);
  }
  void add_col_name(flatbuffers::Offset<flatbuffers::String> col_name) {
    fbb_.AddOffset(ColInt_FBU::VT_COL_NAME, col_name);
  }
  void add_col_index(uint8_t col_index) {
    fbb_.AddElement<uint8_t>(ColInt_FBU::VT_COL_INDEX, col_index, 0);
  }
  void add_RIDs(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> RIDs) {
    fbb_.AddOffset(ColInt_FBU::VT_RIDS, RIDs);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> data) {
    fbb_.AddOffset(ColInt_FBU::VT_DATA, data);
  }
  explicit ColInt_FBUBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ColInt_FBUBuilder &operator=(const ColInt_FBUBuilder &);
  flatbuffers::Offset<ColInt_FBU> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ColInt_FBU>(end);
    return o;
  }
};

inline flatbuffers::Offset<ColInt_FBU> CreateColInt_FBU(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> nullbits = 0,
    flatbuffers::Offset<flatbuffers::String> col_name = 0,
    uint8_t col_index = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> RIDs = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> data = 0) {
  ColInt_FBUBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_RIDs(RIDs);
  builder_.add_col_name(col_name);
  builder_.add_nullbits(nullbits);
  builder_.add_col_index(col_index);
  return builder_.Finish();
}

inline flatbuffers::Offset<ColInt_FBU> CreateColInt_FBUDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *nullbits = nullptr,
    const char *col_name = nullptr,
    uint8_t col_index = 0,
    const std::vector<uint64_t> *RIDs = nullptr,
    const std::vector<uint64_t> *data = nullptr) {
  auto nullbits__ = nullbits ? _fbb.CreateVector<uint64_t>(*nullbits) : 0;
  auto col_name__ = col_name ? _fbb.CreateString(col_name) : 0;
  auto RIDs__ = RIDs ? _fbb.CreateVector<uint64_t>(*RIDs) : 0;
  auto data__ = data ? _fbb.CreateVector<uint64_t>(*data) : 0;
  return Tables::CreateColInt_FBU(
      _fbb,
      nullbits__,
      col_name__,
      col_index,
      RIDs__,
      data__);
}

struct ColFloat_FBU FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NULLBITS = 4,
    VT_COL_NAME = 6,
    VT_COL_INDEX = 8,
    VT_RIDS = 10,
    VT_DATA = 12
  };
  const flatbuffers::Vector<uint64_t> *nullbits() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_NULLBITS);
  }
  const flatbuffers::String *col_name() const {
    return GetPointer<const flatbuffers::String *>(VT_COL_NAME);
  }
  uint8_t col_index() const {
    return GetField<uint8_t>(VT_COL_INDEX, 0);
  }
  const flatbuffers::Vector<uint64_t> *RIDs() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_RIDS);
  }
  const flatbuffers::Vector<float> *data() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NULLBITS) &&
           verifier.VerifyVector(nullbits()) &&
           VerifyOffset(verifier, VT_COL_NAME) &&
           verifier.VerifyString(col_name()) &&
           VerifyField<uint8_t>(verifier, VT_COL_INDEX) &&
           VerifyOffset(verifier, VT_RIDS) &&
           verifier.VerifyVector(RIDs()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct ColFloat_FBUBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nullbits(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> nullbits) {
    fbb_.AddOffset(ColFloat_FBU::VT_NULLBITS, nullbits);
  }
  void add_col_name(flatbuffers::Offset<flatbuffers::String> col_name) {
    fbb_.AddOffset(ColFloat_FBU::VT_COL_NAME, col_name);
  }
  void add_col_index(uint8_t col_index) {
    fbb_.AddElement<uint8_t>(ColFloat_FBU::VT_COL_INDEX, col_index, 0);
  }
  void add_RIDs(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> RIDs) {
    fbb_.AddOffset(ColFloat_FBU::VT_RIDS, RIDs);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<float>> data) {
    fbb_.AddOffset(ColFloat_FBU::VT_DATA, data);
  }
  explicit ColFloat_FBUBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ColFloat_FBUBuilder &operator=(const ColFloat_FBUBuilder &);
  flatbuffers::Offset<ColFloat_FBU> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ColFloat_FBU>(end);
    return o;
  }
};

inline flatbuffers::Offset<ColFloat_FBU> CreateColFloat_FBU(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> nullbits = 0,
    flatbuffers::Offset<flatbuffers::String> col_name = 0,
    uint8_t col_index = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> RIDs = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> data = 0) {
  ColFloat_FBUBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_RIDs(RIDs);
  builder_.add_col_name(col_name);
  builder_.add_nullbits(nullbits);
  builder_.add_col_index(col_index);
  return builder_.Finish();
}

inline flatbuffers::Offset<ColFloat_FBU> CreateColFloat_FBUDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *nullbits = nullptr,
    const char *col_name = nullptr,
    uint8_t col_index = 0,
    const std::vector<uint64_t> *RIDs = nullptr,
    const std::vector<float> *data = nullptr) {
  auto nullbits__ = nullbits ? _fbb.CreateVector<uint64_t>(*nullbits) : 0;
  auto col_name__ = col_name ? _fbb.CreateString(col_name) : 0;
  auto RIDs__ = RIDs ? _fbb.CreateVector<uint64_t>(*RIDs) : 0;
  auto data__ = data ? _fbb.CreateVector<float>(*data) : 0;
  return Tables::CreateColFloat_FBU(
      _fbb,
      nullbits__,
      col_name__,
      col_index,
      RIDs__,
      data__);
}

struct ColString_FBU FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NULLBITS = 4,
    VT_COL_NAME = 6,
    VT_COL_INDEX = 8,
    VT_RIDS = 10,
    VT_DATA = 12
  };
  const flatbuffers::Vector<uint64_t> *nullbits() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_NULLBITS);
  }
  const flatbuffers::String *col_name() const {
    return GetPointer<const flatbuffers::String *>(VT_COL_NAME);
  }
  uint8_t col_index() const {
    return GetField<uint8_t>(VT_COL_INDEX, 0);
  }
  const flatbuffers::Vector<uint64_t> *RIDs() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_RIDS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NULLBITS) &&
           verifier.VerifyVector(nullbits()) &&
           VerifyOffset(verifier, VT_COL_NAME) &&
           verifier.VerifyString(col_name()) &&
           VerifyField<uint8_t>(verifier, VT_COL_INDEX) &&
           VerifyOffset(verifier, VT_RIDS) &&
           verifier.VerifyVector(RIDs()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfStrings(data()) &&
           verifier.EndTable();
  }
};

struct ColString_FBUBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nullbits(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> nullbits) {
    fbb_.AddOffset(ColString_FBU::VT_NULLBITS, nullbits);
  }
  void add_col_name(flatbuffers::Offset<flatbuffers::String> col_name) {
    fbb_.AddOffset(ColString_FBU::VT_COL_NAME, col_name);
  }
  void add_col_index(uint8_t col_index) {
    fbb_.AddElement<uint8_t>(ColString_FBU::VT_COL_INDEX, col_index, 0);
  }
  void add_RIDs(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> RIDs) {
    fbb_.AddOffset(ColString_FBU::VT_RIDS, RIDs);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> data) {
    fbb_.AddOffset(ColString_FBU::VT_DATA, data);
  }
  explicit ColString_FBUBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ColString_FBUBuilder &operator=(const ColString_FBUBuilder &);
  flatbuffers::Offset<ColString_FBU> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ColString_FBU>(end);
    return o;
  }
};

inline flatbuffers::Offset<ColString_FBU> CreateColString_FBU(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> nullbits = 0,
    flatbuffers::Offset<flatbuffers::String> col_name = 0,
    uint8_t col_index = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> RIDs = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> data = 0) {
  ColString_FBUBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_RIDs(RIDs);
  builder_.add_col_name(col_name);
  builder_.add_nullbits(nullbits);
  builder_.add_col_index(col_index);
  return builder_.Finish();
}

inline flatbuffers::Offset<ColString_FBU> CreateColString_FBUDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *nullbits = nullptr,
    const char *col_name = nullptr,
    uint8_t col_index = 0,
    const std::vector<uint64_t> *RIDs = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *data = nullptr) {
  auto nullbits__ = nullbits ? _fbb.CreateVector<uint64_t>(*nullbits) : 0;
  auto col_name__ = col_name ? _fbb.CreateString(col_name) : 0;
  auto RIDs__ = RIDs ? _fbb.CreateVector<uint64_t>(*RIDs) : 0;
  auto data__ = data ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*data) : 0;
  return Tables::CreateColString_FBU(
      _fbb,
      nullbits__,
      col_name__,
      col_index,
      RIDs__,
      data__);
}

inline bool VerifyRelation_FBU(flatbuffers::Verifier &verifier, const void *obj, Relation_FBU type) {
  switch (type) {
    case Relation_FBU_NONE: {
      return true;
    }
    case Relation_FBU_Rows_FBU: {
      auto ptr = reinterpret_cast<const Rows_FBU *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Relation_FBU_Cols_FBU: {
      auto ptr = reinterpret_cast<const Cols_FBU *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Relation_FBU_ColInt_FBU: {
      auto ptr = reinterpret_cast<const ColInt_FBU *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Relation_FBU_ColFloat_FBU: {
      auto ptr = reinterpret_cast<const ColFloat_FBU *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Relation_FBU_ColString_FBU: {
      auto ptr = reinterpret_cast<const ColString_FBU *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyRelation_FBUVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyRelation_FBU(
        verifier,  values->Get(i), types->GetEnum<Relation_FBU>(i))) {
      return false;
    }
  }
  return true;
}

inline bool VerifyDataTypes_FBU(flatbuffers::Verifier &verifier, const void *obj, DataTypes_FBU type) {
  switch (type) {
    case DataTypes_FBU_NONE: {
      return true;
    }
    case DataTypes_FBU_SDT_UINT32_FBU: {
      auto ptr = reinterpret_cast<const SDT_UINT32_FBU *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DataTypes_FBU_SDT_UINT64_FBU: {
      auto ptr = reinterpret_cast<const SDT_UINT64_FBU *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DataTypes_FBU_SDT_FLOAT_FBU: {
      auto ptr = reinterpret_cast<const SDT_FLOAT_FBU *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DataTypes_FBU_SDT_STRING_FBU: {
      auto ptr = reinterpret_cast<const SDT_STRING_FBU *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyDataTypes_FBUVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyDataTypes_FBU(
        verifier,  values->Get(i), types->GetEnum<DataTypes_FBU>(i))) {
      return false;
    }
  }
  return true;
}

inline const Tables::Root_FBU *GetRoot_FBU(const void *buf) {
  return flatbuffers::GetRoot<Tables::Root_FBU>(buf);
}

inline const Tables::Root_FBU *GetSizePrefixedRoot_FBU(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Tables::Root_FBU>(buf);
}

inline bool VerifyRoot_FBUBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Tables::Root_FBU>(nullptr);
}

inline bool VerifySizePrefixedRoot_FBUBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Tables::Root_FBU>(nullptr);
}

inline void FinishRoot_FBUBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tables::Root_FBU> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRoot_FBUBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tables::Root_FBU> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Tables

#endif  // FLATBUFFERS_GENERATED_FBU_TABLES_H_
